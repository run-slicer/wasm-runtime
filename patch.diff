diff --git a/teavm-runtime.js b/runtime.js
index 99999f6..936e248 100644
--- a/teavm-runtime.js
+++ b/runtime.js
@@ -13,7 +13,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-// !BEGINNING!
 
 let globalsCache = new Map();
 let stackDeobfuscator = null;
@@ -689,10 +688,32 @@ function wrapImport(importObj) {
     });
 }
 
-async function wrapImports(wasmModule, imports) {
+// patch start
+async function readImports(wasmModule, src, isNodeJs) {
+    try {
+        return WebAssembly.Module.imports(wasmModule);
+    } catch (e) {
+        let moduleData = src, close = () => {};
+        if (typeof src === "string") {
+            const [response, closeFunc] = await openPath(src, isNodeJs);
+            moduleData = await response.arrayBuffer();
+            close = closeFunc;
+        }
+
+        const { parseImports } = await import("./wasm-imports-parser.js");
+        try {
+            return parseImports(moduleData);
+        } finally {
+            close();
+        }
+    }
+}
+// patch end
+
+async function wrapImports(wasmModule, imports, src, isNodeJs) { // patch - src
     let promises = [];
     let propertiesToAdd = {};
-    for (let { module, name, kind } of WebAssembly.Module.imports(wasmModule)) {
+    for (let { module, name, kind } of await readImports(wasmModule, src, isNodeJs)) { // patch - readImports
         if (kind !== "global" || module in imports) {
             continue;
         }
@@ -744,7 +765,7 @@ async function load(src, options) {
         options.installImports(importObj);
     }
     if (!options.noAutoImports) {
-        await wrapImports(module, importObj);
+        await wrapImports(module, importObj, src, isNodeJs); // patch - src
     }
     let instance = await WebAssembly.instantiate(module, importObj);
 
@@ -914,4 +935,6 @@ async function fetchExternalDebugInfo(path, debugInfoLocation, options, isNodeJs
     }
 
     return new Int8Array(buffer);
-}
\ No newline at end of file
+}
+
+export { load, defaults, wrapImport };
